generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://prabhuji2910:prabhuji@cluster0.vxiu5.mongodb.net/estate?retryWrites=true&w=majority&appName=Cluster0"
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  isSold     Boolean     @default(false)  
  isRented   Boolean     @default(false)  // Add this field if it's missing
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
  visits     Visit[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

enum UserType {
  buyer
  seller
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  tempEmail   String?
  userType   UserType    @default(buyer)
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  visitsRequested Visit[] @relation("UserVisitsRequested")
  visitsReceived  Visit[] @relation("UserVisitsReceived")
  notifications   Notification[]
}

model Otp {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  otp         String
  otpExpires  DateTime
  createdAt   DateTime @default(now())
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

enum VisitStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Visit {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  timeSlot    String      // Store as "HH:MM" format
  status      VisitStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  
  // Relations
  post        Post        @relation(fields: [postId], references: [id])
  postId      String      @db.ObjectId
  visitor     User        @relation("UserVisitsRequested", fields: [visitorId], references: [id])
  visitorId   String      @db.ObjectId
  owner       User        @relation("UserVisitsReceived", fields: [ownerId], references: [id])
  ownerId     String      @db.ObjectId

  message     String?
  responseMessage String?
  notifications Notification[]
}

enum NotificationType {
  VISIT_REQUEST
  VISIT_ACCEPTED
  VISIT_REJECTED
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  
  // Relations
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
  visit     Visit?           @relation(fields: [visitId], references: [id])
  visitId   String?          @db.ObjectId
}

// to save changes use : npx prisma db push